<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  <display-name>SpringDemo</display-name>
  
  <!--
 用于单点退出，该过滤器用于实现单点登出功能，可选配置-->

<!-- <listener>
	<listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
</listener> -->

<!--该过滤器用于实现单点登出功能，可选配置。 -->
<!-- <filter>
	<filter-name>SingleSignOutFilter</filter-name>
	<filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
</filter>
<filter-mapping>
	<filter-name>SingleSignOutFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping> -->

<!--该过滤器负责用户的认证工作，必须启用它 -->
<!-- <filter>
	<filter-name>CASFilter</filter-name>
	<filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>
		<init-param>
			<param-name>casServerLoginUrl</param-name>
			<param-value>https://www.sz-hyf.com:8097/cas</param-value>
			这里的server是服务端的IP
		</init-param>
	<init-param>
		这里是客户端应用服务器IP
		<param-name>serverName</param-name>
		<param-value>https://localhost:8080</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>CASFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>
 -->
<!--该过滤器负责对Ticket的校验工作，必须启用它 -->
<!-- <filter>
	<filter-name>Cas20ProxyReceivingTicketValidationFilter</filter-name>
	<filter-class>org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</filter-class>
		<init-param>
			<param-name>casServerUrlPrefix</param-name>
			<param-value>https://www.sz-hyf.com:8097/cas</param-value>
		</init-param>
	<init-param>
		<param-name>serverName</param-name>
		<param-value>https://localhost:8080</param-value>
</init-param>
</filter>
<filter-mapping>
<filter-name>Cas20ProxyReceivingTicketValidationFilter</filter-name>
<url-pattern>/*</url-pattern>
</filter-mapping> -->
 
<!--该过滤器负责实现HttpServletRequest请求的包裹，比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。-->
<!-- <filter>
	<filter-name>HttpServletRequestWrapperFilter</filter-name>
	<filter-class>org.jasig.cas.client.util.HttpServletRequestWrapperFilter</filter-class>
</filter>
<filter-mapping>
	<filter-name>HttpServletRequestWrapperFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping> -->
<!--该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。比如AssertionHolder.getAssertion().getPrincipal().getName()。-->
<!-- <filter>
	<filter-name>AssertionThreadLocalFilter</filter-name>
	<filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>
</filter>
<filter-mapping>
	<filter-name>AssertionThreadLocalFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping> -->

<!--自动根据单点登录的结果设置本系统的用户信息 -->
<!-- <filter>
	<display-name>AutoSetUserAdapterFilter</display-name>
	<filter-name>AutoSetUserAdapterFilter</filter-name>
	<filter-class>com.test.newsecurity.AutoSetUserAdapterFilter</filter-class>
</filter>

<filter-mapping>
	<filter-name>AutoSetUserAdapterFilter</filter-name>
	<url-pattern>/login/*</url-pattern>
</filter-mapping> -->

<!--
 ======================== 单点登录结束 ======================== -->
  <!-- 字符编码过滤器 -->
  <filter>
  	<filter-name>EncodingFilter</filter-name>
  	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
  	<init-param>
  		<param-name>encoding</param-name>
  		<param-value>UTF-8</param-value>
  	</init-param>
  </filter>
  <filter-mapping>
  	<filter-name>EncodingFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- log4j配置 -->
  <context-param>
  	<param-name>log4jConfigLocation</param-name>
  	<param-value>classpath:config/log4j.properties</param-value>
  </context-param>
  <listener>
  	<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  
  <!-- 权限过滤器 -->
  <filter>
  	<filter-name>authorityFilter</filter-name>
  	<filter-class>com.test.comm.servlet.AuthorityFilter</filter-class> 
  	<init-param>
  		<param-name>notFilterUrl</param-name>
  		<param-value>xx</param-value>
  	</init-param> 	
  </filter>
  
  <filter-mapping>
  	<filter-name>authorityFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- SpringMvc配置 -->
  <servlet>
  	<servlet-name>SpringDemo</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<!-- 指定配置文件的路径 -->
  	<init-param>
  		<param-name>contextConfigLocation</param-name>
  		<param-value>/WEB-INF/spring-servlet.xml</param-value>
  	</init-param>
  	<load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
  	<servlet-name>SpringDemo</servlet-name>
  	<url-pattern>*.action</url-pattern>
  </servlet-mapping>
  
  <!-- spring配置 指定spring配置bean的路径 -->
  <listener>  
        <listener-class>  
            org.springframework.web.context.ContextLoaderListener  
        </listener-class>  
  </listener>
  <context-param>  
        <param-name>contextConfigLocation</param-name>  
        <param-value>classpath:config/spring.xml</param-value>  
   </context-param>   
  
  <welcome-file-list>
    <welcome-file>component/main/index.jsp</welcome-file>
  </welcome-file-list>
</web-app>